com.android.vending.licensing.AESObfuscator -> com.android.vending.licensing.a:
    byte[] IV -> a
    javax.crypto.Cipher mEncryptor -> b
    javax.crypto.Cipher mDecryptor -> c
    java.lang.String obfuscate(java.lang.String) -> a
    java.lang.String unobfuscate(java.lang.String) -> b
com.android.vending.licensing.DeviceLimiter -> com.android.vending.licensing.b:
    com.android.vending.licensing.Policy$LicenseResponse isDeviceAllowed(java.lang.String) -> a
com.android.vending.licensing.ILicenseResultListener -> com.android.vending.licensing.c:
    void verifyLicense(int,java.lang.String,java.lang.String) -> a
com.android.vending.licensing.ILicenseResultListener$Stub -> com.android.vending.licensing.d:
    com.android.vending.licensing.ILicenseResultListener asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.vending.licensing.ILicenseResultListener$Stub$Proxy -> com.android.vending.licensing.e:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void verifyLicense(int,java.lang.String,java.lang.String) -> a
com.android.vending.licensing.ILicensingService -> com.android.vending.licensing.ILicensingService:
    void checkLicense(long,java.lang.String,com.android.vending.licensing.ILicenseResultListener) -> a
com.android.vending.licensing.ILicensingService$Stub -> com.android.vending.licensing.f:
    com.android.vending.licensing.ILicensingService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.vending.licensing.ILicensingService$Stub$Proxy -> com.android.vending.licensing.g:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void checkLicense(long,java.lang.String,com.android.vending.licensing.ILicenseResultListener) -> a
com.android.vending.licensing.LicenseChecker -> com.android.vending.licensing.h:
    java.security.SecureRandom RANDOM -> a
    com.android.vending.licensing.ILicensingService mService -> b
    java.security.PublicKey mPublicKey -> c
    android.content.Context mContext -> d
    com.android.vending.licensing.Policy mPolicy -> e
    android.os.Handler mHandler -> f
    java.lang.String mPackageName -> g
    java.lang.String mVersionCode -> h
    java.util.Set mChecksInProgress -> i
    java.util.Queue mPendingChecks -> j
    java.security.PublicKey generatePublicKey(java.lang.String) -> a
    void checkAccess(com.android.vending.licensing.LicenseCheckerCallback) -> a
    void runChecks() -> b
    void finishCheck(com.android.vending.licensing.LicenseValidator) -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void handleServiceConnectionError(com.android.vending.licensing.LicenseValidator) -> b
    void cleanupService() -> c
    void onDestroy() -> a
    int generateNonce() -> d
    java.lang.String getVersionCode(android.content.Context,java.lang.String) -> a
    void access$0(com.android.vending.licensing.LicenseChecker,com.android.vending.licensing.LicenseValidator) -> a
    void access$1(com.android.vending.licensing.LicenseChecker,com.android.vending.licensing.LicenseValidator) -> b
    android.os.Handler access$2(com.android.vending.licensing.LicenseChecker) -> a
    java.util.Set access$3(com.android.vending.licensing.LicenseChecker) -> b
    java.security.PublicKey access$4(com.android.vending.licensing.LicenseChecker) -> c
com.android.vending.licensing.LicenseChecker$ResultListener -> com.android.vending.licensing.i:
    com.android.vending.licensing.LicenseValidator mValidator -> b
    java.lang.Runnable mOnTimeout -> c
    com.android.vending.licensing.LicenseChecker this$0 -> a
    void verifyLicense(int,java.lang.String,java.lang.String) -> a
    void startTimeout() -> a
    void clearTimeout() -> b
    com.android.vending.licensing.LicenseValidator access$0(com.android.vending.licensing.LicenseChecker$ResultListener) -> a
    void access$1(com.android.vending.licensing.LicenseChecker$ResultListener) -> b
    com.android.vending.licensing.LicenseChecker access$2(com.android.vending.licensing.LicenseChecker$ResultListener) -> c
com.android.vending.licensing.LicenseChecker$ResultListener$1 -> com.android.vending.licensing.j:
    com.android.vending.licensing.LicenseChecker$ResultListener this$1 -> a
    void run() -> run
com.android.vending.licensing.LicenseChecker$ResultListener$2 -> com.android.vending.licensing.k:
    com.android.vending.licensing.LicenseChecker$ResultListener this$1 -> a
    int val$responseCode -> b
    java.lang.String val$signedData -> c
    java.lang.String val$signature -> d
    void run() -> run
com.android.vending.licensing.LicenseCheckerCallback -> com.android.vending.licensing.l:
    void allow() -> a
    void dontAllow() -> b
    void applicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode) -> a
com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode -> com.android.vending.licensing.m:
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode INVALID_PACKAGE_NAME -> a
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode NON_MATCHING_UID -> b
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode NOT_MARKET_MANAGED -> c
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode CHECK_IN_PROGRESS -> d
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode INVALID_PUBLIC_KEY -> e
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode MISSING_PERMISSION -> f
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode[] ENUM$VALUES -> g
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode[] values() -> values
    com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode valueOf(java.lang.String) -> valueOf
com.android.vending.licensing.LicenseValidator -> com.android.vending.licensing.n:
    com.android.vending.licensing.Policy mPolicy -> a
    com.android.vending.licensing.LicenseCheckerCallback mCallback -> b
    int mNonce -> c
    java.lang.String mPackageName -> d
    java.lang.String mVersionCode -> e
    com.android.vending.licensing.DeviceLimiter mDeviceLimiter -> f
    com.android.vending.licensing.LicenseCheckerCallback getCallback() -> a
    int getNonce() -> b
    java.lang.String getPackageName() -> c
    void verify(java.security.PublicKey,int,java.lang.String,java.lang.String) -> a
    void handleResponse(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData) -> a
    void handleApplicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode) -> a
    void handleInvalidResponse() -> d
com.android.vending.licensing.NullDeviceLimiter -> com.android.vending.licensing.o:
    com.android.vending.licensing.Policy$LicenseResponse isDeviceAllowed(java.lang.String) -> a
com.android.vending.licensing.Obfuscator -> com.android.vending.licensing.p:
    java.lang.String obfuscate(java.lang.String) -> a
    java.lang.String unobfuscate(java.lang.String) -> b
com.android.vending.licensing.Policy -> com.android.vending.licensing.q:
    void processServerResponse(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData) -> a
    boolean allowAccess() -> a
com.android.vending.licensing.Policy$LicenseResponse -> com.android.vending.licensing.r:
    com.android.vending.licensing.Policy$LicenseResponse LICENSED -> a
    com.android.vending.licensing.Policy$LicenseResponse NOT_LICENSED -> b
    com.android.vending.licensing.Policy$LicenseResponse RETRY -> c
    com.android.vending.licensing.Policy$LicenseResponse[] ENUM$VALUES -> d
    com.android.vending.licensing.Policy$LicenseResponse[] values() -> values
    com.android.vending.licensing.Policy$LicenseResponse valueOf(java.lang.String) -> valueOf
com.android.vending.licensing.PreferenceObfuscator -> com.android.vending.licensing.s:
    android.content.SharedPreferences mPreferences -> a
    com.android.vending.licensing.Obfuscator mObfuscator -> b
    android.content.SharedPreferences$Editor mEditor -> c
    void putString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> b
    void commit() -> a
com.android.vending.licensing.ResponseData -> com.android.vending.licensing.t:
    int responseCode -> a
    int nonce -> b
    java.lang.String packageName -> c
    java.lang.String versionCode -> d
    java.lang.String userId -> e
    long timestamp -> f
    java.lang.String extra -> g
    com.android.vending.licensing.ResponseData parse(java.lang.String) -> a
    java.lang.String toString() -> toString
com.android.vending.licensing.ServerManagedPolicy -> com.android.vending.licensing.u:
    long mValidityTimestamp -> a
    long mRetryUntil -> b
    long mMaxRetries -> c
    long mRetryCount -> d
    long mLastResponseTime -> e
    com.android.vending.licensing.Policy$LicenseResponse mLastResponse -> f
    com.android.vending.licensing.PreferenceObfuscator mPreferences -> g
    void processServerResponse(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData) -> a
    void setLastResponse(com.android.vending.licensing.Policy$LicenseResponse) -> a
    void setRetryCount(long) -> a
    void setValidityTimestamp(java.lang.String) -> a
    void setRetryUntil(java.lang.String) -> b
    void setMaxRetries(java.lang.String) -> c
    boolean allowAccess() -> a
    java.util.Map decodeExtras(java.lang.String) -> d
com.android.vending.licensing.ValidationException -> com.android.vending.licensing.v:
com.android.vending.licensing.util.Base64 -> com.android.vending.licensing.a.a:
    byte[] ALPHABET -> b
    byte[] WEBSAFE_ALPHABET -> c
    byte[] DECODABET -> d
    byte[] WEBSAFE_DECODABET -> e
    boolean $assertionsDisabled -> a
    byte[] encode3to4(byte[],int,int,byte[],int,byte[]) -> a
    java.lang.String encode(byte[]) -> a
    java.lang.String encode(byte[],int,int,byte[],boolean) -> a
    byte[] encode(byte[],int,int,byte[],int) -> a
    int decode4to3(byte[],int,byte[],int,byte[]) -> a
    byte[] decode(java.lang.String) -> a
    byte[] decode(byte[],int,int) -> a
    byte[] decode(byte[],int,int,byte[]) -> a
com.android.vending.licensing.util.Base64DecoderException -> com.android.vending.licensing.a.b:
com.cepmuvakkit.conversion.AstronomicalDetail -> com.cepmuvakkit.conversion.AstronomicalDetail:
    double jd -> a
    double longitude -> b
    double latitude -> c
    double timezone -> d
    int temperature -> e
    int pressure -> f
    int altitude -> g
    double ?T -> h
    java.text.DecimalFormat oneDigit -> i
    java.text.DecimalFormat twoDigit -> j
    java.text.DateFormat dfTr -> k
    android.widget.TextView mDate -> l
    android.widget.TextView mTimeDiff -> m
    android.widget.TextView mJulianDay -> n
    android.widget.TextView mEclipticLongitude -> o
    android.widget.TextView mEclipticLatitude -> p
    android.widget.TextView mRightAscension -> q
    android.widget.TextView mDeclination -> r
    android.widget.TextView mDistance -> s
    android.widget.TextView mMoonRise -> t
    android.widget.TextView mMoonTransit -> u
    android.widget.TextView mMoonSet -> v
    android.widget.TextView mAge -> w
    android.widget.TextView mIlluminated -> x
    android.widget.TextView mLunarAzimuth -> y
    android.widget.TextView mLunarElevation -> z
    android.widget.TextView mLunarElevationAtmosphere -> A
    android.widget.TextView mIslamicLunation -> B
    android.widget.TextView mBrownLunation -> C
    android.widget.TextView mSunRise -> D
    android.widget.TextView mZenith -> E
    android.widget.TextView mSunset -> F
    android.widget.TextView mSolarEclipticLongitude -> G
    android.widget.TextView mSolarEclipticLatitude -> H
    android.widget.TextView mSolarEquatorialDistance -> I
    android.widget.TextView mSolarRightAscension -> J
    android.widget.TextView mSolarDeclination -> K
    android.widget.TextView mSolarAzimuth -> L
    android.widget.TextView mSolarElevation -> M
    void onCreate(android.os.Bundle) -> onCreate
com.cepmuvakkit.conversion.GPSTracker -> com.cepmuvakkit.conversion.GPSTracker:
    android.content.Context mContext -> i
    boolean isGPSEnabled -> a
    boolean isNetworkEnabled -> b
    boolean canGetLocation -> c
    android.location.Location location -> d
    double latitude -> e
    double longitude -> f
    double altitude -> g
    android.location.LocationManager locationManager -> h
    android.location.Location getLocation() -> a
    void stopUsingGPS() -> b
    double getLatitude() -> c
    double getAltitude() -> d
    double getLongitude() -> e
    boolean canGetLocation() -> f
    void showSettingsAlert() -> g
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    android.os.IBinder onBind(android.content.Intent) -> onBind
    android.content.Context access$0(com.cepmuvakkit.conversion.GPSTracker) -> a
com.cepmuvakkit.conversion.GPSTracker$1 -> com.cepmuvakkit.conversion.a:
    com.cepmuvakkit.conversion.GPSTracker this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cepmuvakkit.conversion.GPSTracker$2 -> com.cepmuvakkit.conversion.b:
    com.cepmuvakkit.conversion.GPSTracker this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cepmuvakkit.conversion.HijriCalendar -> com.cepmuvakkit.conversion.HijriCalendar:
    byte[] SALT -> a
    com.android.vending.licensing.LicenseChecker mChecker -> b
    com.android.vending.licensing.LicenseCheckerCallback mLicenseCheckerCallback -> c
    void doCheck() -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onDestroy() -> onDestroy
    void startMainActivity() -> b
    void toast(java.lang.String) -> a
    void access$0(com.cepmuvakkit.conversion.HijriCalendar) -> a
com.cepmuvakkit.conversion.HijriCalendar$1 -> com.cepmuvakkit.conversion.c:
    com.cepmuvakkit.conversion.HijriCalendar this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cepmuvakkit.conversion.HijriCalendar$2 -> com.cepmuvakkit.conversion.d:
    com.cepmuvakkit.conversion.HijriCalendar this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cepmuvakkit.conversion.HijriCalendar$MyLicenseCheckerCallback -> com.cepmuvakkit.conversion.e:
    com.cepmuvakkit.conversion.HijriCalendar this$0 -> a
    void allow() -> a
    void applicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode) -> a
    void dontAllow() -> b
com.cepmuvakkit.conversion.HijriCalendarTab -> com.cepmuvakkit.conversion.HijriCalendarTab:
    com.cepmuvakkit.conversion.views.MoonCanvasView moonCanvasView -> a
    int temperature -> b
    int pressure -> c
    int altitude -> d
    double mLatitude -> e
    double mLongitude -> f
    double mTimeZone -> g
    double moonPhase -> h
    double timezoneinDay -> i
    java.lang.String mLocationName -> j
    android.widget.Button mPickDate -> k
    android.widget.Button mPickTime -> l
    android.widget.Button mPreviousButton -> m
    android.widget.Button mNextButton -> n
    android.widget.TextView mDateHijri -> o
    android.widget.TextView mPositionValues -> p
    android.widget.TextView mCityName -> q
    android.widget.TextView mMoonRise -> r
    android.widget.TextView mMoonTransit -> s
    android.widget.TextView mMoonSet -> t
    android.widget.TextView mLit -> u
    android.widget.TextView mAzimuth -> v
    android.widget.TextView mAltitude -> w
    android.widget.TextView mMoonAge -> x
    android.widget.TextView mLunation -> y
    android.widget.TextView mSunSet -> z
    android.widget.TextView mJulianDate -> A
    android.widget.TextView mMoonDistance -> B
    android.widget.TextView mNewMoon -> C
    android.widget.TextView mNewCrescent -> D
    android.widget.TextView mFirstQuarter -> E
    android.widget.TextView mFullMoon -> F
    android.widget.TextView mLastQuarter -> G
    android.widget.TextView mSolarEclipse -> H
    android.widget.TextView mLunarEclipse -> I
    android.widget.TextView mSunElevation -> J
    android.widget.TextView mMoonStatus -> K
    android.widget.ImageView mImageViewMoon -> L
    com.cepmuvakkit.times.posAlgo.SunMoonPosition sunMoonPosition -> M
    double moonAgeConjuction -> N
    double jd -> O
    double mSunsetHour -> P
    double moonSetTime -> Q
    double ?T -> R
    java.text.DecimalFormat twoDigitFormat -> S
    java.text.DecimalFormat oneDigit -> T
    java.text.DecimalFormat twoDigit -> U
    java.text.DateFormat dfTr -> V
    java.text.DateFormat dfTime -> W
    java.text.DateFormat dfDate -> X
    android.content.SharedPreferences preferences -> Y
    int w -> Z
    int h -> aa
    double[] moonPhasesJd -> ab
    int[] eclipses -> ac
    com.cepmuvakkit.conversion.GPSTracker gps -> ad
    android.app.DatePickerDialog$OnDateSetListener mDateSetListener -> ae
    android.app.TimePickerDialog$OnTimeSetListener mTimeSetListener -> af
    void onCreate(android.os.Bundle) -> onCreate
    void updateDisplayDate() -> b
    void updateHijriDisplay(android.content.Context) -> a
    void updateDisplayTime() -> c
    void updatePhaseAndEclipses() -> d
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void returnCurrentJulianDay() -> e
    void updateLocationInfo() -> a
    void moonAgeConjuction() -> f
    void updateMoonInformation() -> g
    void getLocation() -> h
    java.lang.String getLocationName(double,double) -> a
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onRestart() -> onRestart
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onStop() -> onStop
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void openConversion(android.view.View) -> openConversion
    void astronomicalInformation(android.view.View) -> astronomicalInformation
    void setTimetoNewMoon(android.view.View) -> setTimetoNewMoon
    void setTimetoNewCrescent(android.view.View) -> setTimetoNewCrescent
    void setTimetoFirstQuarter(android.view.View) -> setTimetoFirstQuarter
    void setTimetoFullMoon(android.view.View) -> setTimetoFullMoon
    void setTimetoLastQuarter(android.view.View) -> setTimetoLastQuarter
    void setTimetoReal(android.view.View) -> setTimetoReal
    void setTimetoSunSet(android.view.View) -> setTimetoSunSet
    void setTimetoMoonSet(android.view.View) -> setTimetoMoonSet
    double access$0(com.cepmuvakkit.conversion.HijriCalendarTab) -> a
    double access$1(com.cepmuvakkit.conversion.HijriCalendarTab) -> b
    void access$2(com.cepmuvakkit.conversion.HijriCalendarTab,double) -> a
    void access$3(com.cepmuvakkit.conversion.HijriCalendarTab) -> c
    void access$4(com.cepmuvakkit.conversion.HijriCalendarTab) -> d
    double[] access$5(com.cepmuvakkit.conversion.HijriCalendarTab) -> e
    void access$6(com.cepmuvakkit.conversion.HijriCalendarTab) -> f
    void access$7(com.cepmuvakkit.conversion.HijriCalendarTab) -> g
com.cepmuvakkit.conversion.HijriCalendarTab$1 -> com.cepmuvakkit.conversion.f:
    com.cepmuvakkit.conversion.HijriCalendarTab this$0 -> a
    void onDateSet(android.widget.DatePicker,int,int,int) -> onDateSet
com.cepmuvakkit.conversion.HijriCalendarTab$2 -> com.cepmuvakkit.conversion.g:
    com.cepmuvakkit.conversion.HijriCalendarTab this$0 -> a
    void onTimeSet(android.widget.TimePicker,int,int) -> onTimeSet
com.cepmuvakkit.conversion.HijriCalendarTab$3 -> com.cepmuvakkit.conversion.h:
    com.cepmuvakkit.conversion.HijriCalendarTab this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.HijriCalendarTab$4 -> com.cepmuvakkit.conversion.i:
    com.cepmuvakkit.conversion.HijriCalendarTab this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.HijriCalendarTab$5 -> com.cepmuvakkit.conversion.j:
    com.cepmuvakkit.conversion.HijriCalendarTab this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.HijriCalendarTab$6 -> com.cepmuvakkit.conversion.k:
    com.cepmuvakkit.conversion.HijriCalendarTab this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.HijriCalendarWidgetGreen -> com.cepmuvakkit.conversion.HijriCalendarWidgetGreen:
    android.content.SharedPreferences preferences -> a
    int mYear -> b
    int mMonth -> c
    int mDay -> d
    int mHour -> e
    int mMinute -> f
    int mSecond -> g
    double mLatitude -> h
    double mLongitude -> i
    double mTimeZone -> j
    double mSunsetHour -> k
    double jd -> l
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void returnCurrentJulianDay() -> a
com.cepmuvakkit.conversion.HijriCalendarWidgetRL -> com.cepmuvakkit.conversion.HijriCalendarWidgetRL:
    android.content.SharedPreferences preferences -> a
    int mYear -> b
    int mMonth -> c
    int mDay -> d
    int mHour -> e
    int mMinute -> f
    int mSecond -> g
    double mLatitude -> h
    double mLongitude -> i
    double mTimeZone -> j
    double mSunsetHour -> k
    double jd -> l
    boolean isAfterMagrib -> m
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void returnCurrentJulianDay() -> a
com.cepmuvakkit.conversion.HijriConversion -> com.cepmuvakkit.conversion.HijriConversion:
    android.widget.EditText dayText -> a
    android.widget.EditText yearText -> b
    android.widget.TextView mDateDisplay -> c
    android.widget.Button mConvertButton -> d
    android.widget.CheckBox isAfterMagribChkBx -> e
    android.widget.Button mPreviousButton -> f
    android.widget.Button mNextButton -> g
    android.widget.Spinner s1 -> h
    int mYear -> i
    int mMonth -> j
    int mDay -> k
    double jd -> l
    boolean isAfterMagrib -> m
    void onCreate(android.os.Bundle) -> onCreate
    void updateHijriDisplay(android.content.Context) -> a
    void updateGregorianDisplay() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    java.lang.String[] getMonthStrings() -> a
    void access$0(com.cepmuvakkit.conversion.HijriConversion,boolean) -> a
    void access$1(com.cepmuvakkit.conversion.HijriConversion,android.content.Context) -> a
    double access$2(com.cepmuvakkit.conversion.HijriConversion) -> a
    void access$3(com.cepmuvakkit.conversion.HijriConversion,double) -> a
    void access$4(com.cepmuvakkit.conversion.HijriConversion,int) -> a
    void access$5(com.cepmuvakkit.conversion.HijriConversion,int) -> b
    void access$6(com.cepmuvakkit.conversion.HijriConversion,int) -> c
    void access$7(com.cepmuvakkit.conversion.HijriConversion) -> b
    android.widget.EditText access$8(com.cepmuvakkit.conversion.HijriConversion) -> c
    android.widget.Spinner access$9(com.cepmuvakkit.conversion.HijriConversion) -> d
    android.widget.EditText access$10(com.cepmuvakkit.conversion.HijriConversion) -> e
com.cepmuvakkit.conversion.HijriConversion$1 -> com.cepmuvakkit.conversion.l:
    com.cepmuvakkit.conversion.HijriConversion this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.cepmuvakkit.conversion.HijriConversion$2 -> com.cepmuvakkit.conversion.m:
    com.cepmuvakkit.conversion.HijriConversion this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
com.cepmuvakkit.conversion.HijriConversion$3 -> com.cepmuvakkit.conversion.n:
    com.cepmuvakkit.conversion.HijriConversion this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.HijriConversion$4 -> com.cepmuvakkit.conversion.o:
    com.cepmuvakkit.conversion.HijriConversion this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.HijriConversion$5 -> com.cepmuvakkit.conversion.p:
    com.cepmuvakkit.conversion.HijriConversion this$0 -> a
    void onClick(android.view.View) -> onClick
com.cepmuvakkit.conversion.MoonCanvasInfoWidget -> com.cepmuvakkit.conversion.MoonCanvasInfoWidget:
    com.cepmuvakkit.conversion.views.MoonCanvasView moonCanvasView -> a
    int mYear -> b
    int mMonth -> c
    int mDay -> d
    int mHour -> e
    int mMinute -> f
    int mSecond -> g
    int temperature -> h
    int pressure -> i
    int altitude -> j
    double mLatitude -> k
    double mLongitude -> l
    double mTimeZone -> m
    double jd -> n
    double ?T -> o
    com.cepmuvakkit.times.posAlgo.SunMoonPosition sunMoonPosition -> p
    java.text.DecimalFormat oneDigit -> q
    android.content.SharedPreferences preferences -> r
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void returnCurrentJulianDay() -> a
    double moonAgeConjuction() -> b
com.cepmuvakkit.conversion.R -> com.cepmuvakkit.conversion.q:
com.cepmuvakkit.conversion.R$styleable -> com.cepmuvakkit.conversion.r:
    int[] LunarPhaseIcons -> LunarPhaseIcons
    int LunarPhaseIcons_phase -> LunarPhaseIcons_phase
com.cepmuvakkit.conversion.SunMoonInfoWidget -> com.cepmuvakkit.conversion.SunMoonInfoWidget:
    com.cepmuvakkit.conversion.views.MoonCanvasView moonCanvasView -> a
    int mYear -> b
    int mMonth -> c
    int mDay -> d
    int mHour -> e
    int mMinute -> f
    int mSecond -> g
    int temperature -> h
    int pressure -> i
    int altitude -> j
    double mLatitude -> k
    double mLongitude -> l
    double mTimeZone -> m
    double jd -> n
    double ?T -> o
    com.cepmuvakkit.times.posAlgo.SunMoonPosition sunMoonPosition -> p
    java.text.DecimalFormat oneDigit -> q
    android.content.SharedPreferences preferences -> r
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void returnCurrentJulianDay() -> a
    double moonAgeConjuction() -> b
com.cepmuvakkit.conversion.hicricalendar.HicriCalendar -> com.cepmuvakkit.conversion.a.a:
    byte dayOfWeek -> f
    java.lang.String[] ismiSuhiri -> g
    int Lunation -> h
    int hijriYear -> i
    int hijriMonth -> j
    int hijriDay -> k
    boolean[] isFound -> l
    double tNewMoon -> m
    double moonAgeConjuction -> n
    double tCrescent -> o
    double synmonth -> a
    double dt -> b
    double dtc -> c
    double acc -> d
    double LunatBase -> e
    int getHijriYear() -> a
    java.lang.String getHicriTakvim(android.content.Context) -> a
    java.lang.String getHijriMonthName(android.content.Context) -> b
    int getHijriDay() -> b
    java.lang.String checkIfHolyDay(android.content.Context,boolean) -> a
    java.lang.String getDay(android.content.Context) -> c
    int getLunation() -> c
    double getMoonAge() -> d
com.cepmuvakkit.conversion.libration.Moon -> com.cepmuvakkit.conversion.b.a:
    double B_Moon -> a
    double L_Moon -> b
    double T -> c
    double frac(double) -> a
    void computeMoon(double) -> b
    double lambda() -> a
com.cepmuvakkit.conversion.libration.MoonDistance -> com.cepmuvakkit.conversion.b.b:
    double jde -> a
    double computeR() -> a
com.cepmuvakkit.conversion.libration.MoonPositionAngle -> com.cepmuvakkit.conversion.b.c:
    double jd -> a
    double distance -> b
    com.cepmuvakkit.conversion.libration.MoonDistance moonDist -> c
    com.cepmuvakkit.conversion.libration.compute comp -> d
    com.cepmuvakkit.conversion.libration.Moon moon -> e
    double latitude -> f
    double longitude -> g
    double RA -> h
    double dec -> i
    double elev -> j
    double lambda -> k
    double Ls -> l
    double pAngleAxis -> m
    double getPositionAngleAxis() -> a
    double frac(double) -> a
    double computeMoon(double,int) -> a
    double moonParal(double,double) -> a
    double pAngle(double,double,double) -> a
    double lib(double,double,int) -> a
    double refract(double) -> b
    double ParallacticAngle() -> b
    double GM_Sidereal_Time(double) -> c
    double moon_LHA(double,double,double) -> b
com.cepmuvakkit.conversion.libration.compute -> com.cepmuvakkit.conversion.b.d:
    double K -> a
    char deg -> b
    double GM_Sidereal_Time(double) -> a
    double frac(double) -> b
    double LM_Sidereal_Time(double,double) -> a
    double sun_elev(double,double,double,double,double) -> a
com.cepmuvakkit.conversion.phaseEvents.MonthPhases -> com.cepmuvakkit.conversion.c.a:
    boolean[] isFound -> d
    double[] moonPhasesJd -> e
    int[] eclipses -> f
    double tMoonPhase -> g
    double tCrescent -> h
    double dt -> a
    double dtc -> b
    double acc -> c
    int SolarEclipseFlag(double,double,boolean) -> a
    int LunarEclipseFlag(double,double,boolean) -> b
    double[] getMoonPhasesJd() -> a
    int[] getEclipses() -> b
com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases -> com.cepmuvakkit.conversion.c.b:
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases NewMoon -> a
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases FirstQuarter -> b
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases FullMoon -> c
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases LastQuarter -> d
    int angle -> e
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases[] ENUM$VALUES -> f
    int getAngle() -> a
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases[] values() -> values
    com.cepmuvakkit.conversion.phaseEvents.MonthPhases$Phases valueOf(java.lang.String) -> valueOf
com.cepmuvakkit.conversion.phaseEvents.MoonPhases -> com.cepmuvakkit.conversion.c.c:
    com.cepmuvakkit.times.posAlgo.SolarPosition solar -> a
    com.cepmuvakkit.times.posAlgo.LunarPosition lunar -> b
    com.cepmuvakkit.times.posAlgo.Ecliptic moonPos -> c
    com.cepmuvakkit.times.posAlgo.Ecliptic solarPos -> d
    double searchPhaseEvent(double,double,int) -> a
    double modulo(double,double) -> a
    double frac(double) -> a
com.cepmuvakkit.conversion.settings.LunarCalendarSettings -> com.cepmuvakkit.conversion.settings.a:
    com.cepmuvakkit.conversion.settings.LunarCalendarSettings instance -> a
    boolean isManualInput -> b
    boolean isDataFromGPS -> c
    java.lang.String customCity -> d
    double longitude -> e
    double latitude -> f
    double timezone -> g
    double julianDay -> h
    int temperature -> i
    int elongation -> j
    int pressure -> k
    int altitude -> l
    int adjusment -> m
    void setJulianDay(double) -> a
    boolean isDataFromGPS() -> a
    void setDataFromGPS(boolean) -> a
    void setManualInput(boolean) -> b
    com.cepmuvakkit.conversion.settings.LunarCalendarSettings getInstance() -> b
    java.lang.String getCustomCity() -> c
    void setCustomCity(java.lang.String) -> a
    double getTimezone() -> d
    void setTimezone(double) -> b
    int getTemperature() -> e
    int getPressure() -> f
    int getAltitude() -> g
    void setAltitude(int) -> a
    boolean isManualInput() -> h
    double getLatitude() -> i
    double getLongitude() -> j
    void setLongitude(double) -> c
    void setLatitude(double) -> d
    int getAdjusment() -> k
    void load(android.content.SharedPreferences) -> a
    void save(android.content.SharedPreferences) -> b
com.cepmuvakkit.conversion.settings.MoonCalendarPreferenceActivity -> com.cepmuvakkit.conversion.settings.MoonCalendarPreferenceActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
com.cepmuvakkit.conversion.views.LunarPhaseIcons -> com.cepmuvakkit.conversion.views.LunarPhaseIcons:
    int parentWidth -> b
    android.content.Context paramContext -> a
    int parentHeight -> c
    int radius -> d
    int offset -> e
    float strokeWidth -> f
    java.lang.String phase -> g
    android.graphics.Paint paint -> h
    android.graphics.RectF rect -> i
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void setPhase(java.lang.String) -> setPhase
com.cepmuvakkit.conversion.views.MoonCanvasView -> com.cepmuvakkit.conversion.views.a:
    com.cepmuvakkit.times.posAlgo.SunMoonPosition sunMoonPosition -> a
    android.graphics.drawable.Drawable mCustomImage -> b
    double moonPhase -> c
    double latitude -> d
    double longitude -> e
    double jd -> f
    double ?T -> g
    android.graphics.Paint paint -> h
    android.graphics.Paint paintFullMoon -> i
    android.graphics.Bitmap fullMoonImg -> j
    android.graphics.Bitmap moonMask -> k
    android.graphics.Bitmap moonCanvasBmp -> l
    android.graphics.Canvas canvas -> m
    float rotation -> n
    float posAngleAxis -> o
    boolean afterFullMoon -> p
    android.content.Context context -> q
    int w -> r
    int h -> s
    int diameter -> t
    float getPosAngleAxis() -> getPosAngleAxis
    void initMoonCanvasView(android.content.Context) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    android.graphics.Bitmap getBitmapImage() -> getBitmapImage
    android.graphics.Bitmap makeFullMoon(android.graphics.drawable.Drawable,float) -> a
    android.graphics.Bitmap makeMoonMask(double,float) -> a
    void setParameters(double,double,double,double,double,boolean,int,int) -> a
com.cepmuvakkit.times.posAlgo.AstroLib -> com.cepmuvakkit.a.a.a:
    double calculateJulianDay(int,int,int,int,int,int,double) -> a
    double calculateJulianDay(java.util.Calendar) -> a
    double getJulianEphemerisDay(double,double) -> a
    double getJulianEphemerisCentury(double) -> a
    double getJulianEphemerisMillennium(double) -> b
    double calculateTimeDifference(double) -> c
    int[] convertHour2HHMMSS(double) -> d
    int[] convertHour2HHMM(double) -> e
    java.lang.String getStringHHMMSSS(double) -> f
    int[] convert2Sexagesimal(double) -> g
    java.lang.String getSexagesimalStr(double) -> h
    java.lang.String getStringHHMM(double) -> i
    java.lang.String intTwoDigit(int) -> a
    double limitZero2one(double) -> j
    double dayFracToLocalHour(double,double) -> b
    java.lang.String getStringHHMMfromDayFrac(double,double) -> c
    java.lang.String PORStr(byte) -> a
    java.lang.String PrecedOrFollowStr(android.content.Context,byte) -> a
    byte[] isPreceedingOrFollowingDay(double[],double) -> a
    int[] fromJulian(double) -> k
    int[] getYMDHMSfromJulian(double) -> l
    java.util.GregorianCalendar convertJulian2Gregorian(double) -> m
    double thirdOrderPolynomial(double,double,double,double,double) -> a
    double fourthOrderPolynomial(double,double,double,double,double,double) -> a
    double getApparentAtmosphericRefraction(double) -> n
    double getAtmosphericRefraction(double) -> o
    double getWeatherCorrectionCoefficent(int,int) -> a
    double getAltitudeCorrection(int) -> b
    double limitDegrees(double) -> p
    double Pegasus(com.cepmuvakkit.conversion.phaseEvents.MoonPhases,double,double,double,double,boolean[],int) -> a
com.cepmuvakkit.times.posAlgo.Ecliptic -> com.cepmuvakkit.a.a.b:
    double ? -> a
    double ? -> b
    double ? -> c
com.cepmuvakkit.times.posAlgo.Equatorial -> com.cepmuvakkit.a.a.c:
    double ? -> a
    double ? -> b
    double ? -> c
    com.cepmuvakkit.times.posAlgo.Horizontal Equ2Topocentric(double,double,double,double,double) -> a
    double ?sin?Prime(double,double) -> a
    double ?Cos?Prime(double,double) -> b
    double getHorizontalParallax(double) -> a
com.cepmuvakkit.times.posAlgo.Horizontal -> com.cepmuvakkit.a.a.d:
    double h -> a
    double Az -> b
    double getElevation() -> a
    double getAzimuth() -> b
com.cepmuvakkit.times.posAlgo.LunarPosition -> com.cepmuvakkit.a.a.e:
    byte cD -> a
    byte cM -> b
    byte cMP -> c
    byte cF -> d
    byte cSin -> e
    byte cCos -> f
    byte[][] argCoeffor?l?r -> g
    int[][] coefSinCos?l?r -> h
    byte[][] argCoeffor?b -> i
    int[] coefSin?b -> j
    double meanElongationMoonSun(double) -> b
    double meanMoonLongitude(double) -> c
    double meanAnomalySun(double) -> d
    double meanAnomalyMoon(double) -> e
    double argumentLatitudeMoon(double) -> f
    double eccentrityOfEarthOrbit(double) -> g
    double effectVenus(double) -> h
    double effectJupiter(double) -> i
    double effectFlatting(double) -> j
    com.cepmuvakkit.times.posAlgo.Ecliptic calculateMoonEclipticCoordinates(double,double) -> a
    com.cepmuvakkit.times.posAlgo.Ecliptic calculateMoonEclipticCoordinatesAstronomic(double,double) -> b
    com.cepmuvakkit.times.posAlgo.Equatorial calculateMoonEquatorialCoordinates(double,double) -> c
    com.cepmuvakkit.times.posAlgo.Equatorial calculateMoonEqutarialCoordinates(com.cepmuvakkit.times.posAlgo.Ecliptic,double,double) -> a
    double[] summation?l?r(double,double,double,double,double,double) -> a
    double summation?b(double,double,double,double,double,double) -> b
    double[] calculateMoonRiseTransitSet(double,double,double,double,int,int,int) -> a
    double[] calculateMoonRiseTransitSetJulian(double,double,double,int,int,int) -> a
    double getHorizontalParallax(double) -> a
    double getLunarRiseSetAltitude(double,int,int,int) -> a
com.cepmuvakkit.times.posAlgo.MATH -> com.cepmuvakkit.a.a.f:
    double acos(double) -> a
    double asin(double) -> b
    double atan(double) -> c
    double atan2(double,double) -> a
    double pow(double,double) -> b
    double exp(double) -> d
    double _log(double) -> f
    double log(double) -> e
com.cepmuvakkit.times.posAlgo.SolarPosition -> com.cepmuvakkit.a.a.g:
    byte L_COUNT -> a
    byte B_COUNT -> b
    byte R_COUNT -> c
    byte Y_COUNT -> d
    double SUNRADIUS -> e
    byte FAJR -> f
    byte SUNRISE -> g
    byte SUNTRANSIT -> h
    byte ASR_SHAFI -> i
    byte ASR_HANEFI -> j
    byte SUNSET -> k
    byte ISHA -> l
    byte SUN_COUNT -> m
    byte FAJR_ -> n
    byte ISRAK -> o
    byte SUNTRANSIT_ -> p
    byte ASRHANEFI -> q
    byte ISFIRAR -> r
    byte SUNSET_ -> s
    byte KERAHAT_COUNT -> t
    byte DUHA -> u
    byte ISTIVA -> v
    double[][][] LTERMS -> w
    double[][][] BTERMS -> x
    double[][][] RTERMS -> y
    byte[][] YTERMS -> z
    double[][] PETERMS -> A
    double limitDegrees(double) -> a
    double limitDegrees180pm(double) -> b
    double limitDegrees180(double) -> c
    double limitZero2one(double) -> d
    double dayFracToLocalHour(double,double) -> a
    double earthHeliocentricLongitude(double) -> i
    double earthRadiusVector(double) -> j
    double earthHeliocentricLatitude(double) -> k
    double earthPeriodicTermSummation(double[][],int,double) -> a
    double earthValues(double[],int,double) -> a
    double getGeocentricLatitude(double) -> e
    double geocentricLongitude(double) -> f
    double meanElongationMoonSun(double) -> l
    double meanAnomalySun(double) -> m
    double meanAnomalyMoon(double) -> n
    double argumentLatitudeMoon(double) -> o
    double ascendingLongitudeMoon(double) -> p
    double xyTermSummation(int,double[]) -> a
    double nutationObliquity(double,double[]) -> a
    double nutationLongitude(double,double[]) -> b
    double eclipticTrueObliquity(double,double) -> b
    double apparentSunLongitude(double,double,double) -> g
    double aberrationCorrection(double) -> q
    double eclipticMeanObliquity(double) -> g
    double greenwichMeanSiderealTime(double) -> h
    double greenwichSiderealTime(double,double,double) -> a
    double geocentricRightAscension(double,double,double) -> b
    double geocentricDeclination(double,double,double) -> c
    double approxSunTransitTime(double,double,double) -> d
    double getHourAngleAtRiseSet(double,double,double) -> e
    void approxSunRiseAndSet(double[],double) -> a
    double rtsAlphaDeltaPrime(double[],double) -> b
    double Interpolate(double,double[]) -> c
    double rtsSunAltitude(double,double,double) -> f
    double sunRiseAndSet(double[],double[],double[],double,double[],double,int) -> a
    double[] calculateSunRiseTransitSet(double,double,double,double,double) -> a
    com.cepmuvakkit.times.posAlgo.Equatorial calculateSunEquatorialCoordinates(double,double) -> c
    com.cepmuvakkit.times.posAlgo.Equatorial calculateSunEquatorialCoordinates(com.cepmuvakkit.times.posAlgo.Ecliptic,double,double) -> a
    com.cepmuvakkit.times.posAlgo.Ecliptic calculateSunEclipticCoordinatesAstronomic(double,double) -> d
    double calculateGreenwichSiderealTime(double,double) -> e
    double[] calculateXArray(double,double) -> f
com.cepmuvakkit.times.posAlgo.SunMoonPosition -> com.cepmuvakkit.a.a.h:
    com.cepmuvakkit.times.posAlgo.Horizontal sunPosition -> a
    com.cepmuvakkit.times.posAlgo.Horizontal moonPosition -> b
    double moonPhase -> c
    double E -> d
    com.cepmuvakkit.times.posAlgo.SolarPosition solar -> e
    com.cepmuvakkit.times.posAlgo.LunarPosition lunar -> f
    com.cepmuvakkit.times.posAlgo.Ecliptic moonPosEc -> g
    com.cepmuvakkit.times.posAlgo.Ecliptic solarPosEc -> h
    com.cepmuvakkit.times.posAlgo.Equatorial moonPosEq -> i
    com.cepmuvakkit.times.posAlgo.Equatorial solarPosEq -> j
    double getDistance() -> a
    com.cepmuvakkit.times.posAlgo.Horizontal getMoonPosition() -> b
    double getMoonIllimunated() -> c
    double getTopocentricSunAltitude() -> d
